import java.io.IOException;
import java.text.ParseException;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.solab.iso8583.IsoMessage;
import com.solab.iso8583.MessageFactory;
import com.solab.iso8583.util.HexCodec;

/** 
 * @author XT Huang
 * @date 2017年9月28日
 *
 * @Description:
 *
 */
public class Test8583 {

		/*
		F0 F8 F0 F0 C2 20 00 00 80 00 00 02 04 00 00 05 
		00 00 00 00 F0 F5 F1 F4 F3 F8 F1 F0 F4 F0 F7 F0 
		F6 F0 F3 F4 F2 F3 F2 F7 F7 F7 F2 F0 F6 F0 F1 F4 
		F3 F8 F1 F0 F0 F9 D4 C3 E2 F0 F1 F1 F9 F7 F6 F0 
		F6 F1 F0 C9 F0 40 40 40 40 F0 F0 F0 F0 F0 F0 F0 
		F0 
		[MTI ]<0800>
		Bitmap: [c2200000800000020400000500000000]
		out[  2: ]<05>
		out[  2: ]<14381>
		out[  7: ]<0407>
		out[  7: ]<060342>
		out[ 11: ]<327772>
		out[ 33: ]<06>
		out[ 33: ]<014381>
		out[ 63: ]<009>
		out[ 63: ]<MCS011976>
		out[ 70: ]<061>
		out[ 94: ]<0I0    >
		out[ 96: ]<3030303030303030>
		*/
		private static final Logger logger = LoggerFactory.getLogger(Test8583.class);
		
		private MessageFactory<IsoMessage> configEBC(){
		    MessageFactory<IsoMessage> mfact = new MessageFactory<>();
		    try {
			mfact.setConfigPath("ppap.xml");
			mfact.setUseBinaryBitmap(true);
			mfact.setCharacterEncoding("Cp1047");
		        mfact.setForceStringEncoding(true);
			} catch (IOException e) {
				logger.error("msg configuration load fail", e);
			}
		    return mfact;
		}
		
		private MessageFactory<IsoMessage> configASC(String path){
		    MessageFactory<IsoMessage> mfact = new MessageFactory<>();
		    try {
			mfact.setConfigPath("ppap.xml");
			mfact.setCharacterEncoding("UTF-8");
			} catch (IOException e) {
				logger.error("msg configuration load fail", e);
			}
		    return mfact;
		}
	
		@Test
		public IsoMessage msgRead1(){
			
			MessageFactory<IsoMessage> mfact = configEBC();
			
			byte[] trama = HexCodec.hexDecode("F0F8F0F0C2200000800000020400000500000000F0F5F1F4F3F8F1F0F4F0F7F0F6F0F3F4F2F3F2F7F7F7F2F0F6F0F1F4F3F8F1F0F0F9D4C3E2F0F1F1F9F7F6F0F6F1F0C9F040404040F0F0F0F0F0F0F0F0");
			try {
		        return mfact.parseMessage(trama, 0);
			} catch (IOException e) {
				logger.error("Header read fail", e);
			} catch (ParseException pe){
				logger.error("Header read fail", pe);
			}
			return new IsoMessage();
		}
		
		@Test
		public IsoMessage msgRead2(){
			
			MessageFactory<IsoMessage> mfact = configASC();
		        return mfact.parseMessage("0210B23A80012EA08018000000001400000465000000000000300004281305474687711259460428042808115".getBytes(), 0);
			} catch (IOException e) {
				logger.error("Header read fail", e);
			} catch (ParseException pe){
				logger.error("Header read fail", pe);
			}
			return new IsoMessage();
		}
}
